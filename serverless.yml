# NOTE: update this with your service name
service: cyto-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: scandata

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /scandata
  # - method: POST request
  
  createScan:
    handler: createScan.main
    events:
      - http:
          path: scandata
          method: post
          authorizer: aws_iam
  
  getUserScan:
    handler: getUserScan.main
    events:
      - http:
          path: scandata/{userId}/{scanId}
          method: get
          authorizer: aws_iam
    
  listUserScans:
    handler: listUserScans.main
    events:
      - http:
          path: scandata
          method: get
          authorizer: aws_iam
  
  updateScan:
    handler: updateScan.main
    events:
      - http:
          path: scandata/{userId}/{scanId}
          method: put
          authorizer: aws_iam
  
  deleteScan:
    handler: deleteScan.main
    events:
      - http:
          path: scandata/{userId}/{scanId}
          method: delete
          authorizer: aws_iam

        
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
